Need to wrap adc-doc-parser.rb in a shell script that cleans up the html


 1011  ruby adc-doc-parser.rb < Contents//Resources/Documents/documentation/UIKit/Reference/UITableView_Class/Reference/Reference.html   | less
 1012  history 2 >> NOTES

Functions and Constants should be treated separately?




not all relevant files end with Reference.html

e.g.

Contents/Resources/Documents/documentation/UIKit/Reference/UITextViewDelegate_Protocol/Reference/UITextViewDelegate.html

bin/parse < 4_2/Contents/Resources/Documents/documentation/UIKit/Reference/UIImagePickerController_Class/UIImagePickerController/UIImagePickerController.html

This HTML file parses correctly. It needs to be picked up by the script that 
generates the list of documentation files to feed into the parser tool.


Fields 

cocoa_class
superclasses (array)
protocols
framework
availability (of class)
companion_guides
related_sample_code
overview

methods:
name # could be instanceMethod classMethod property?
type
declaration
parameters (array) # can be text
return_value
abstract
discussion
taskgroup <- could be typedef enum
availability
seealso
related_sample_code

Question: should I put constants and Classes in this same table?

- then cocoa_class => name
- superclasses could also encompass typedef or constants group
- taskgroup could serve 
- declared_in is also useful

- reuse: decaration, availability, related_sample_code

At what point does producing intermediate YAML make things more
complicated than inserting directly into 

Maybe I should make the parser a simple dispatch

Change `cocoa_class` to `name` and use for class, method, property,
functions, and constants

It may be easier to test and scan the program by inserting records
directly into the database. Use sequel.

Maybe instead of putting this in all in a database, the database should
just be an index to lines in a textfile, like ctags.

Then I just have a make a set of text files for each page in the doc of
functions, etc.

seealso and related code can go into discussion




This is also a path to be aware of

4_2/Contents/Resources/Documents/documentation/Cocoa/Reference/Foundation/Miscellaneous/Foundation_DataTypes/Reference/reference.html



bin/parse < 4_2/Contents/Resources/Documents/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/Reference/NSString.html


Should deal with datatypes and constants in the same table.


TODO: flag required delegate methods

  Configuring a Table View

     * – tableView:cellForRowAtIndexPath:  required method
     * – numberOfSectionsInTableView:
     * – tableView:numberOfRowsInSection:  required method
     * – sectionIndexTitlesForTableView:
DONE

CFStream - contains functions, datatypes and constants on the same page!

api special considerations

tight jump struct
tight jump typeDef

both are DataTypes

/home/choi/.rvm/gems/ruby-1.9.2-p180/gems/sqlite3-1.3.3/lib/sqlite3/database.rb:97:in `close': SQLite3::ConstraintException: columns framework, type, name are not unique (Sequel::DatabaseError)

------------------------------------------------------------------------
Sun May 22 10:07:54 EDT 2011

I may not even need to use Ruby to display the results. Just a shell
script wrapper around sqlite3 used as a command line tool?

vim -t {tag} may be useful.

The file to edit and the initial cursor position depends on a "tag".
{tag} is looked up in the tags file, the associated file becomes the
current file and the associated command is executed. {tag} could be a
function name. See :help tag-commands.

ex starts vim in ex mode. Go to normal mode with :vi.

view is like less.

VMAIL: use the -f flag: Foreground. This option should be used when Vim
is executed by a program that will wait for the edit session to finish
(e.g. mail).

From vim help:

  With the ":tag" command the cursor will be positioned on the tag.
  With the CTRL-] command, the keyword on which the cursor is standing
  is used as the tag.  If the cursor is not on a keyword, the first
  keyword to the right of the cursor is used.

  The ":tag" command works very well for C programs.  If you see a call
  to a function and wonder what that function does, position the cursor
  inside of the function name and hit CTRL-].  This will bring you to
  the function definition.  An easy way back is with the CTRL-T command.
  Also read about the tag stack below.


Add a field to hold URL to source file so user can open directly.

4_2/Contents/Resources/Documents/documentation/DeveloperTools/Reference/XcodeUserDefaultRef/100-Xcode_User_Defaults/UserDefaultRef.html

does not contain standard documentation.

avoid:

*book.html
RevisionHistory.html
index.html

Can also skip paths with "Guide" in it.
e.g.
4_2/Contents/Resources/Documents/documentation/ContactData/Conceptual/AddressBookProgrammingGuideforiPhone

Successfully stuck a lot of data into the sqlite3 database.
Size of generated database: 8.8M

Issues:
- unique index violations. Try again, and keep a log.

Truncate lead part of path:
4_2/Contents/Resources/Documents/documentation/


4_2/Contents/Resources/Documents/documentation/Cocoa/Reference/Foundation/Classes/NSArray_Class
4_2/Contents/Resources/Documents/documentation/Cocoa/Reference/Foundation/Classes/NSArray_Class/NSArray.html
